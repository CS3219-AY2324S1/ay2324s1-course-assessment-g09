version: "3"
services:
  postgres:
    container_name: postgres_auth_dev
    image: postgres:latest
    environment:
      # To hide
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - postgres-db:/var/lib/postgresql/data

    restart: always
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  user-service:
    container_name: user-service_auth_dev
    image: user-service-img
    environment:
      # To hide
      RESTAPI_PORT: 3002
      DB_SERVER: postgres # PostgreSQL variables.
      DB_DATABASE: postgres
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_PORT: 5432
    restart: always
    build:
      context: ../backend/user_service/
      dockerfile: Dockerfile

    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:3002/users/getUser || exit 1
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 40s
  gateway:
    container_name: apigateway_auth_dev
    image: apigateway-img
    restart: always
    build:
      context: ../gateway/
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      user-service:
        condition: service_healthy
      matching-service:
        condition: service_started
  auth-service:
    container_name: auth_service_auth_dev
    image: auth-service-img
    restart: always
    build:
      context: ../backend/authentication_service/
      dockerfile: Dockerfile
    environment:
      # To hide
      RESTAPI_PORT: 3004
      USER_SERVICE: user-service:3002
      SECRET_KEY: /run/secrets/secret_key
    secrets:
      - secret_key

  mongo:
    container_name: mongo
    image: mongo:latest
    restart: always
    volumes:
      - mongo-db:/data/db

    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongo:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  question-service:
    container_name: question-service
    image: question-service-img
    environment:
      RESTAPI_PORT: 3001
      DB_SERVER: mongodb://mongo:27017
      DB_PORT: 27017 # Must be the same as the port in DB_SERVER. For logging only.
    restart: always
    build:
      context: ../backend/question_service/
      dockerfile: Dockerfile
    ports:
      - 3001:3001
    depends_on:
      - mongo
    healthcheck:
      test: ["CMD", "curl", "-f", "http://question-service:3001/questions"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
  frontend:
    container_name: frontend
    image: frontend-img
    restart: always
    environment:
      NEXT_PUBLIC_IP_ADDRESS: http://localhost
    build:
      context: ../frontend
      dockerfile: Dockerfile
  collaboration-service:
    container_name: collaboration-service
    image: collaboration-service-img
    restart: always
    environment:
      PORT: 8001
      ORIGIN: 'http://gateway:3000'

    build:
      context: ../backend/collaboration_service
      dockerfile: Dockerfile
  matching-service:
    container_name: matching-service
    image: matching-service-img
    restart: always
    environment:
      PORT: 8004
      RABBITMQ: "amqp://rabbitmq"
      ORIGIN: "http://gateway:3000"

    depends_on:
      rabbitmq:
        condition: service_healthy
    build:
      context: ../backend/matching_service
      dockerfile: Dockerfile
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.12.6-management
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
  communication-service:
    container_name: communication-service
    image: communication-service-img
    restart: always
    build:
      context: ../backend/communication_service
      dockerfile: Dockerfile

    environment:
      PORT: 8002
      ORIGIN: 'http://gateway:3000'
  history-service:
    container_name: history-service
    image: history-service-img
    environment:
      RESTAPI_PORT: 8003
      DB_SERVER: mongodb://mongo-history:27018
      DB_PORT: 27018 # Must be the same as the port in DB_SERVER. For logging only.
    restart: always
    build:
      context: ../backend/history_service
      dockerfile: Dockerfile
    depends_on:
      - mongo-history
    healthcheck:
      test: ["CMD", "curl", "-f", "http://history-service:8003/getAllHistory"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
  mongo-history:
    container_name: mongo-history
    image: mongo:latest
    restart: always
    command: mongod --port 27018
    volumes:
      - mongo-history-db:/data/db

    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo-historysh mongo-history:27018/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
volumes:
  # Persistent data
  postgres-db:
  mongo-db:
  mongo-history-db:

secrets:
  secret_key:
    file: secret.txt
