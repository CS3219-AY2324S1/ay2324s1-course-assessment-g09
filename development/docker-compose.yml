version: "3"
services:
  postgres:
    container_name: postgres_auth_dev
    image: postgres:latest
    environment:
      # To hide
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - postgres-db:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  user-service:
    container_name: user-service_auth_dev
    image: wkdouze/user-service-img
    environment:
      # To hide
      RESTAPI_PORT: 3002
      DB_SERVER: postgres # PostgreSQL variables.
      DB_DATABASE: postgres
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_PORT: 5432
    restart: always
    build:
      context: ../backend/user_service/
      dockerfile: Dockerfile
    # ports:
    #   - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:3002/users/getUser || exit 1
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 40s
  gateway:
    container_name: apigateway_auth_dev
    image: wkdouze/apigateway-img
    restart: always
    build:
      context: ../gateway/
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      user-service:
        condition: service_healthy
  auth-service:
    container_name: auth_service_auth_dev
    image: wkdouze/auth-service-img
    restart: always
    build:
      context: ../backend/authentication_service/
      dockerfile: Dockerfile
    environment:
      # To hide
      RESTAPI_PORT: 3004
      USER_SERVICE: user-service:3002
      SECRET_KEY: J7kPq2xRtVzLwY9fX6eG1sA4iB3oDmC8nU5hW0lZ
    # ports:
    #   - "3004:3004"
  mongo:
    container_name: mongo
    image: mongo:latest
    restart: always
    volumes:
      - mongo-db:/data/db
    # ports:
    #   - 27017:27017
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongo:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  question-service:
    container_name: question-service
    image: wkdouze/question-service-img
    environment:
      RESTAPI_PORT: 3001
      DB_SERVER: mongodb://mongo:27017
      DB_PORT: 27017 # Must be the same as the port in DB_SERVER. For logging only.
    restart: always
    build:
      context: ../backend/question_service/
      dockerfile: Dockerfile
    ports:
      - 3001:3001
    depends_on:
      - mongo
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://question-service:3001/questions"
        ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
  frontend:
    container_name: frontend
    image: wkdouze/frontend-img
    restart: always
    environment:
      NEXT_PUBLIC_IP_ADDRESS: http://localhost
    build:
      context: ../frontend
      dockerfile: Dockerfile
    # ports:
    #   - "3005:3005"

volumes:
  # Persistent data
  postgres-db:
  mongo-db:


