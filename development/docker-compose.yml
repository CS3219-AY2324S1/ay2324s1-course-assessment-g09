version: "3"
services:
  postgres:
    container_name: postgres_auth_dev
    image: postgres:latest
    environment:
      # To hide
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - postgres-db:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  user-service:
    container_name: user-service_auth_dev
    image: user-service-img
    environment:
      # To hide
      RESTAPI_PORT: 3002
      DB_SERVER: postgres # PostgreSQL variables.
      DB_DATABASE: postgres
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_PORT: 5432
    restart: always
    build:
      context: ../backend/user_service/
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3002/users/getall",
          "||",
          "exit",
          "1"
        ]
      interval: 60s
      retries: 5
      start_period: 20s
      timeout: 10s
  gateway:
    container_name: apigateway_auth_dev
    image: apigateway-img
    restart: always
    build:
      context: ../gateway/
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
  auth_service:
    container_name: auth_service_auth_dev
    image: auth-service-img
    restart: always
    build:
      context: ../backend/authentication_service/
      dockerfile: Dockerfile
    environment:
      # To hide
      RESTAPI_PORT: 3004
      USER_SERVICE: host.docker.internal:3002
      SECRET_KEY: J7kPq2xRtVzLwY9fX6eG1sA4iB3oDmC8nU5hW0lZ
    # ports:
    #   - "3004:3004"
volumes:
  # Persistent data
  postgres-db:
