name: Push Images to ECR and Deploy to EB.
on: 
  push:
    branches:
      - master

env:
  AWS_REGION : ap-southeast-1
  ROLE_TO_ASSUME: arn:aws:iam::920185736846:role/GitHubAction-AssumeRoleWithAction # Get from Choon Yong
  SHORT_SHA: $(echo ${{ github.sha }} | cut -c 1-8)

jobs: 
  # Leave space for testing
  build:
    runs-on: ubuntu-latest
    permissions: # These permissions are needed to interact with GitHub's OIDC Token endpoint.
      id-token: write
      contents: read
    outputs:
      AWS_SESSION_TOKEN : ${{ steps.creds.outputs.aws_session_token }}  
      ECR_REPOSITORY: ${{ steps.login-ecr.outputs.registry }}
    strategy: # Define image parameters for a For Loop
      matrix:
        image_parameters: [ # Add new deployment stuff here.
          { Name: authentication-service, Path: './backend/authentication_service'},
          { Name: collaboration-service, Path: './backend/collaboration_service'},
          { Name: communication-service, Path: './backend/communication_service'},
          { Name: history-service, Path:  './backend/history_service'},
          { Name: matching-service, Path: './backend/matching_service'},
          #{ Name: matching-service-rabbitmq, Path: './backend/matching_service_rabbitmq'},
          { Name: user-service, Path: './backend/user_service' }, 
          { Name: question-service, Path: './backend/question_service' }, 
          { Name: gateway, Path: './gateway'},
          { Name: frontend, Path: './frontend' }  
        ]
    steps:
      # AWS Authentication
      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          output-credentials: true
      # Sanity Check
      - name: Sts GetCallerIdentity (Sanity Check)
        run: |
          aws sts get-caller-identity
      # Login to ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      # Initialisation
      - name: Check out code
        uses: actions/checkout@v4
      # Building images
      - name : Build, tag, and push image to Amazon ECR ( ${{ matrix.image_parameters.Name }} )
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ matrix.image_parameters.Name }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ${{ matrix.image_parameters.Path }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy-to-eks:
    needs: build
    runs-on: ubuntu-latest
    permissions: # These permissions are needed to interact with GitHub's OIDC Token endpoint.
      id-token: write
      contents: read
    steps:
      # Install and configure kubectl
      - name: Install and configure kubectl
        run: |
          VERSION=$(curl --silent https://storage.googleapis.com/kubernetes-release/release/stable.txt)
          #VERSION=v1.23.6 # https://github.com/aws/aws-cli/issues/6920#issuecomment-1117981158
          curl https://storage.googleapis.com/kubernetes-release/release/$VERSION/bin/linux/amd64/kubectl \
            --progress-bar \
            --location \
            --remote-name
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          echo ${{ secrets.KUBECONFIG }} | base64 --decode > kubeconfig.yaml

      # AWS Authentication
      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          output-credentials: true
      # Sanity Check
      - name: Sts GetCallerIdentity (Sanity Check)
        run: |
          aws sts get-caller-identity

      - name: Preparing Kubeconfig
        run: |
          mkdir -p $HOME/.kube
          sudo cp -i kubeconfig.yaml $HOME/.kube/config
          sudo chown $(id -u):$(id -g) $HOME/.kube/config

      # Initialisation
      - name: Check out code
        uses: actions/checkout@v4
      
      # Deploy to EKS
      - name: Deploy to EKS
        run: |
          echo "export ECR_REPOSITORY=${{ needs.build.outputs.ECR_REPOSITORY }}/${{ needs.build.outputs.ECR_REPOSITORY }}"
          echo "export IMAGE_TAG=${{ env.SHORT_SHA }}"
          echo "export KUBECONFIG=kubeconfig.yaml"
          echo "envsubst < kubernetes_deployment/kustomization.tmpl.yaml > kubernetes_deployment/kustomization.yaml"
          kubectl kustomize kubernetes_deployment | kubectl apply -f -
  
  deploy-to-eb:
    needs: build
    runs-on: ubuntu-latest
    permissions: # These permissions are needed to interact with GitHub's OIDC Token endpoint.
      id-token: write
      contents: read
    steps:
      # Deployment
      - name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_session_token: ${{ needs.build.outputs.AWS_SESSION_TOKEN }}
          application_name: PeerPrep
          environment_name: PeerPrep-env
          version_label: 16 #To manually iterate
          region: ap-southeast-1
          #deployment_package: ./aws_deploy/docker-compose.yml # No change to yaml file for now
          wait_for_deployment: false  # Set to true to save Github Actions free hours    